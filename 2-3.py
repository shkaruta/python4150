## Задание 3
'''
Дан список списков. Длина спискасовпадает с длиной вложенных списков (квадратная матрица). 
Найдите дискриминант предложенной матрицы.
* Простой вариант реализации: считайте, что матрица 3 на 3
* сложный вариант: матрица размера n на n
**Исходно использовать сторонние библиотеки нельзя. По желанию можно дополнительно найти библиотечный способ и предложить его для проверки.**
'''

import numpy as np 
import random

def determinant(A):
    '''
    Возвращает определитель матрицы A, вычисленный методом Гаусса.
    Используем свойство: определитель треугольной матрицы равен произведению элементов главной диагонали.
    Для этого с помощью элементарных преобразований приводим матрицу к верхнетреугольной форме.
    Функция не проверяет существование определителя у матрицы.
    К сожалению, в функции есть ошибки, которые пока не удалось исправить.
    '''
    # создаем матрицу K - копию матрицы A
    n = len(A)
    K = [[A[i][j] for j in range(n)] for i in range(n)]
    # движемся по элементам главной диагонали df (diagonal focus)
    for df in range(n): 
    # используем только строки ниже df  
        for i in range(df+1,n): 
            # если элемент df равен нулю, делаем его примерно равным нулю
            if K[df][df] == 0: 
                K[df][df] = 1.0e-18
            # coeff - нормирующий коэффициент для каждой строки
            coeff = K[i][df] / K[df][df] 
            # складываем строки так, чтобы ниже главной диагонали получились нули
            for j in range(n): 
                K[i][j] = K[i][j] - coeff * K[df][j]
    # матрица приведена к верхнетреугольной форме
    product = 1.0
    for i in range(n):
        product *= K[i][i] 
    return product

# тестирование функции determinant и проверка при помощи numpy
for n in range(1, 6):
    A = [[random.randint(-100, 100) for j in range(n)] for i in range(n)]
    det = determinant(A)
    npd = np.linalg.det(A)
    print(f'Matrix {n}*{n}')
    print(A)
    print("Det:", round(det,4))
    print("Numpy Det:", round(npd,4))
